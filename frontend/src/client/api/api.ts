/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface CSVEntry
 */
export interface CSVEntry {
  /**
   *
   * @type {number}
   * @memberof CSVEntry
   */
  row_number: number;
  /**
   *
   * @type {string}
   * @memberof CSVEntry
   */
  company_name: string;
  /**
   *
   * @type {string}
   * @memberof CSVEntry
   */
  matched_entity?: string | null;
}
/**
 *
 * @export
 * @interface CSVSubmission
 */
export interface CSVSubmission {
  /**
   *
   * @type {string}
   * @memberof CSVSubmission
   */
  _id?: string;
  /**
   *
   * @type {string}
   * @memberof CSVSubmission
   */
  filename: string;
  /**
   *
   * @type {string}
   * @memberof CSVSubmission
   */
  status: string;
  /**
   *
   * @type {Array<CSVEntry>}
   * @memberof CSVSubmission
   */
  entries: Array<CSVEntry>;
  /**
   *
   * @type {number}
   * @memberof CSVSubmission
   */
  total_rows: number;
  /**
   *
   * @type {number}
   * @memberof CSVSubmission
   */
  duplicates: number;
  /**
   *
   * @type {number}
   * @memberof CSVSubmission
   */
  matches: number;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface UpdateStatusModel
 */
export interface UpdateStatusModel {
  /**
   *
   * @type {string}
   * @memberof UpdateStatusModel
   */
  status: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<ValidationErrorLocInner>}
   * @memberof ValidationError
   */
  loc: Array<ValidationErrorLocInner>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}
/**
 *
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Delete Submission Endpoint
     * @param {string} submissionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubmissionEndpointSubmissionsSubmissionIdDelete: async (
      submissionId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'submissionId' is not null or undefined
      assertParamExists(
        'deleteSubmissionEndpointSubmissionsSubmissionIdDelete',
        'submissionId',
        submissionId,
      );
      const localVarPath = `/submissions/{submission_id}`.replace(
        `{${'submission_id'}}`,
        encodeURIComponent(String(submissionId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Download Submission
     * @param {string} submissionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadSubmissionSubmissionsSubmissionIdDownloadGet: async (
      submissionId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'submissionId' is not null or undefined
      assertParamExists(
        'downloadSubmissionSubmissionsSubmissionIdDownloadGet',
        'submissionId',
        submissionId,
      );
      const localVarPath = `/submissions/{submission_id}/download`.replace(
        `{${'submission_id'}}`,
        encodeURIComponent(String(submissionId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Submission
     * @param {string} submissionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubmissionSubmissionsSubmissionIdGet: async (
      submissionId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'submissionId' is not null or undefined
      assertParamExists(
        'getSubmissionSubmissionsSubmissionIdGet',
        'submissionId',
        submissionId,
      );
      const localVarPath = `/submissions/{submission_id}`.replace(
        `{${'submission_id'}}`,
        encodeURIComponent(String(submissionId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Submissions
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubmissionsSubmissionsGet: async (
      page?: number,
      limit?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/submissions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRootGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Submission
     * @param {string} submissionId
     * @param {UpdateStatusModel} updateStatusModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubmissionSubmissionsSubmissionIdStatusPut: async (
      submissionId: string,
      updateStatusModel: UpdateStatusModel,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'submissionId' is not null or undefined
      assertParamExists(
        'updateSubmissionSubmissionsSubmissionIdStatusPut',
        'submissionId',
        submissionId,
      );
      // verify required parameter 'updateStatusModel' is not null or undefined
      assertParamExists(
        'updateSubmissionSubmissionsSubmissionIdStatusPut',
        'updateStatusModel',
        updateStatusModel,
      );
      const localVarPath = `/submissions/{submission_id}/status`.replace(
        `{${'submission_id'}}`,
        encodeURIComponent(String(submissionId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateStatusModel,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Upload Csv
     * @param {File} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadCsvUploadCsvPost: async (
      file: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'file' is not null or undefined
      assertParamExists('uploadCsvUploadCsvPost', 'file', file);
      const localVarPath = `/upload-csv`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      if (file !== undefined) {
        localVarFormParams.append('file', file as any);
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Delete Submission Endpoint
     * @param {string} submissionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSubmissionEndpointSubmissionsSubmissionIdDelete(
      submissionId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteSubmissionEndpointSubmissionsSubmissionIdDelete(
          submissionId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          'DefaultApi.deleteSubmissionEndpointSubmissionsSubmissionIdDelete'
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Download Submission
     * @param {string} submissionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async downloadSubmissionSubmissionsSubmissionIdDownloadGet(
      submissionId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.downloadSubmissionSubmissionsSubmissionIdDownloadGet(
          submissionId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          'DefaultApi.downloadSubmissionSubmissionsSubmissionIdDownloadGet'
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get Submission
     * @param {string} submissionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubmissionSubmissionsSubmissionIdGet(
      submissionId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CSVSubmission>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSubmissionSubmissionsSubmissionIdGet(
          submissionId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          'DefaultApi.getSubmissionSubmissionsSubmissionIdGet'
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get Submissions
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubmissionsSubmissionsGet(
      page?: number,
      limit?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<CSVSubmission>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSubmissionsSubmissionsGet(
          page,
          limit,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.getSubmissionsSubmissionsGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readRootGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.readRootGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.readRootGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update Submission
     * @param {string} submissionId
     * @param {UpdateStatusModel} updateStatusModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSubmissionSubmissionsSubmissionIdStatusPut(
      submissionId: string,
      updateStatusModel: UpdateStatusModel,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CSVSubmission>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateSubmissionSubmissionsSubmissionIdStatusPut(
          submissionId,
          updateStatusModel,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          'DefaultApi.updateSubmissionSubmissionsSubmissionIdStatusPut'
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Upload Csv
     * @param {File} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadCsvUploadCsvPost(
      file: File,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CSVSubmission>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.uploadCsvUploadCsvPost(file, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.uploadCsvUploadCsvPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary Delete Submission Endpoint
     * @param {string} submissionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubmissionEndpointSubmissionsSubmissionIdDelete(
      submissionId: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .deleteSubmissionEndpointSubmissionsSubmissionIdDelete(
          submissionId,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Download Submission
     * @param {string} submissionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadSubmissionSubmissionsSubmissionIdDownloadGet(
      submissionId: string,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .downloadSubmissionSubmissionsSubmissionIdDownloadGet(
          submissionId,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Submission
     * @param {string} submissionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubmissionSubmissionsSubmissionIdGet(
      submissionId: string,
      options?: any,
    ): AxiosPromise<CSVSubmission> {
      return localVarFp
        .getSubmissionSubmissionsSubmissionIdGet(submissionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Submissions
     * @param {number} [page]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubmissionsSubmissionsGet(
      page?: number,
      limit?: number,
      options?: any,
    ): AxiosPromise<Array<CSVSubmission>> {
      return localVarFp
        .getSubmissionsSubmissionsGet(page, limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readRootGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .readRootGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Submission
     * @param {string} submissionId
     * @param {UpdateStatusModel} updateStatusModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubmissionSubmissionsSubmissionIdStatusPut(
      submissionId: string,
      updateStatusModel: UpdateStatusModel,
      options?: any,
    ): AxiosPromise<CSVSubmission> {
      return localVarFp
        .updateSubmissionSubmissionsSubmissionIdStatusPut(
          submissionId,
          updateStatusModel,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upload Csv
     * @param {File} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadCsvUploadCsvPost(
      file: File,
      options?: any,
    ): AxiosPromise<CSVSubmission> {
      return localVarFp
        .uploadCsvUploadCsvPost(file, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Delete Submission Endpoint
   * @param {string} submissionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteSubmissionEndpointSubmissionsSubmissionIdDelete(
    submissionId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .deleteSubmissionEndpointSubmissionsSubmissionIdDelete(
        submissionId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Download Submission
   * @param {string} submissionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public downloadSubmissionSubmissionsSubmissionIdDownloadGet(
    submissionId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .downloadSubmissionSubmissionsSubmissionIdDownloadGet(
        submissionId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Submission
   * @param {string} submissionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getSubmissionSubmissionsSubmissionIdGet(
    submissionId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .getSubmissionSubmissionsSubmissionIdGet(submissionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Submissions
   * @param {number} [page]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getSubmissionsSubmissionsGet(
    page?: number,
    limit?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .getSubmissionsSubmissionsGet(page, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Read Root
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public readRootGet(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .readRootGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Submission
   * @param {string} submissionId
   * @param {UpdateStatusModel} updateStatusModel
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateSubmissionSubmissionsSubmissionIdStatusPut(
    submissionId: string,
    updateStatusModel: UpdateStatusModel,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .updateSubmissionSubmissionsSubmissionIdStatusPut(
        submissionId,
        updateStatusModel,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Upload Csv
   * @param {File} file
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uploadCsvUploadCsvPost(file: File, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .uploadCsvUploadCsvPost(file, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
